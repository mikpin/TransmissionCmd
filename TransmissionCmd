#!/usr/bin/python

from cmd import Cmd
import sys
import transmissionrpc as t
from transmissionrpc.utils import make_rpc_name,argument_value_convert
import os
from prettytable import PrettyTable as PT
import json
import subprocess
import urllib2
import urllib
import pprint
import datetime
import getopt

def fenopy(keyword,limit=100,sort='size',format='json',category=3):
    """
   Base URL: http://fenopy.se/module/search/api.php
   Required. The base URL for a data feed request.
   keyword: keyword=openoffice
   Required. The keyword that being searched on our database.
   limit: limit=25
   Optional. Limit number of returened results. max: 100 - min: 1 - default: 50
   sort: sort=size
   Optional. Indicates the sorting order and direction for the returned data. values: size, peer, relevancy - default: relevancy
   format: format=json
   Optional. Indicates the format of returned results. values: xml, json - default: xml
   category: category=1
   Optional. Limit search to defined category.
   values:
   0 (all)
   1 (music)
   2 (video)
   3 (movies)
   4 (games)
   5 (anime)
   6 (applications)
   7 (books)
   78 (tv shows)
   default: 0
   sample: http://fenopy.se/module/search/api.php?keyword=openoffice&sort=peer&format=json&limit=60&category=6
   Search our database for `openoffice` and returns 60 results ordered by number of peers in json format.
   XML output format
   sample xml output
    """
    keyword=urllib.quote_plus(keyword)
    url = "http://fenopy.se/module/search/api.php?keyword=%s&sort=%s&format=%s&limit=%d&category=%d"%(keyword,sort,format,limit,category)
    print url
    try:
        r=urllib2.urlopen(url)
        return json.loads(r.read())
    except URLError as e:
        print e.reason
        return []

def hbytes(num):
    for x in ['bytes','KB','MB','GB']:
        if num < 1024.0:
            return "%3.1f%s" % (num, x)
        num /= 1024.0
    return "%3.1f%s" % (num, 'TB')

class TransmissionCMD(Cmd):
    def __init__(s):
        Cmd.__init__(s)
        s.config_file = os.path.expanduser('~/.config/TransmissionCmd/config.json')
        s.conf={}
        s.results=[]
        s.do_config('load')
        s.do_connect("%s:%d"%(s.conf['host'],s.conf['port']))
        s.prompt = '(TransmissionCMD)'
    def do_list(s,line):
        """List Download queue.\nExample:\nlist"""
        x = PT(['id','Name','Size','Status','Ratio','Up','Down','ETA'])
        x.align['Name']='l'
        up=down=0
        for tor in s.t.get_torrents():
            if tor.status=='seeding':
                ratio=tor.percentDone
            else:
                ratio=tor.percentDone
            x.add_row([tor.id,tor.name[0:35],hbytes(tor.sizeWhenDone),tor.status,tor.ratio,tor.rateUpload/1000,tor.rateDownload/1000,tor.format_eta()])
            up+=tor.rateUpload
            down+=tor.rateDownload
        print x
        print "Upload: %dKBi/s\t Download: %dKBi/s"%(up/1000,down/1000)
    def do_add(s,line):
        """Adds Torrent/Magnet/Link\nExample:\nadd torrent/magnet """
        s.t.add_torrent(line)
    def do_stop(s,line):
        """Stops Torrent\nExample:\nstop id """
        if line.isdigit():
            print "Stopping: %s."%line
            s.t.stop_torrent(int(line))
    def do_start(s,line):
        """Starts Torrent\nExample:\nstart id"""
        if line.isdigit():
            print "Starting: %s."%line
            s.t.start_torrent(int(line))
    def do_start_all(s,line):
        """Starts alla torrents\nExample:\nstart_all"""
        print "Starting ALL"
        s.t.start_all()
    def do_set_session(s,line):
        """Sets and lists session valuses\nExample:\nset [key] [val]\nset (returns a complete list)\nset keyword (return single keyword)\nset keyword value"""
        se=s.t.get_session()
        if line=="":
            for (k,v) in sorted(se._fields.items()): print "%s: %s"%(k,getattr(se,k))
            return
        kv=line.split(' ',1)
        if len(kv)==1:
            try:
                print "%s: %s"%(kv[0],getattr(se,kv[0]))
            except:
                print "%s does not exists"%kv[0]
            return
        (k,value)=kv
        argument=make_rpc_name(k)
        try:
            (arg, val) = argument_value_convert('session-set' , argument, value, s.t.rpc_version)
        except:
            print "ERROR: set %s"%line
            return
        print "setting %s = %s"%(arg,val)
        args={}
        args[arg] = val
        if len(args) > 0:
            s.t._request('session-set', args, timeout=None)
    def do_connect(s,line):
        """Connect To Server\nExample:\nconnect"""
        print "Connectnig to: %s:%d width %s:%s"%(s.conf['host'],int(s.conf['port']),s.conf['user'],s.conf['password'])
        try:
            s.t=t.Client(address=s.conf['host'], port=int(s.conf['port']), user=s.conf['user'], password=s.conf['password'])
        except:
            print "Connection ERROR!\ncheck your configuration."
            return
        print "Connected!"
    def do_debug(s,line):
        """Set the DEBUG ON (transmissionrpc lib)\nExample:\ndebug"""
        t.add_stdout_logger()
    def do_quit(s,line):
        """exit."""
        sys.exit()
    def do_config(s,line):
        """Saves configuration\nconf [save/load] [set <key value>]\nconfig set user transmission\nconfig load\nset (lists current config)"""
        if line == 'load':
            if (os.path.exists(s.config_file)):
                print "Loading config from:%s"%s.config_file
                f=open(s.config_file,'r')
                s.conf=json.load(f)
                f.close()
                return
            else:
                print "%s: not exists.\nUsing defaults."%s.config_file
                s.conf['host']="localhost"
                s.conf['port']=9091
                s.conf['user']='transmission'
                s.conf['password']='transmission'
                return
        if line == 'save':
            dir = os.path.dirname(s.config_file)
            if not os.path.exists(dir):
                os.makedirs(dir)
            f=open(s.config_file,'w')
            json.dump(s.conf,f)
            f.close()
            return
        if line.startswith('set'):
            argv=line.split(' ')
            if len(argv)!=3:
                print "Error:\nExample: set user transmission"
                return
            if not argv[1] in ['host','port','user','password']:
                print "Error:\n%s not in ['host','port','user','password']"%argv[1]
                return
            s.conf[argv[1]]=argv[2]
            print "Set %s = %s\nremeber to save and/or connect"%(argv[1],argv[2])
            return
        pprint.pprint(s.conf)
    def do_results(s,line):
        """Print search results\nExample:\nresults"""
        x=PT(['id','Name','size','seeders','leechers'])
        x.align['Name']='l'
        id=1
        for r in s.results:
            x.add_row([id,r['name'][0:50],hbytes(r['size']),r['seeder'],r['leecher']])
            id+=1
        print x
        print "Total results: %d"%len(s.results)
    def do_download(s,line):
        """Download result\nExample:\ndownload <id>"""
        if line.isdigit() and int(line)<=len(s.results):
            n=int(line) - 1
            s.do_add(s.results[int(line)-1]['torrent'])
            print "Downloading %s: %s"%(line,s.results[int(line)-1]['name'])
            return
        print "Error wrong id."
    def do_search(s,line):
        """Search Torrents on fenopy.se\nExample:\nsearch ubuntu\nsearch --category/-c 3 rambo"""
        print "Powered by Fenopy api."
        category=3
        try:
            opts,args = getopt.getopt(line.split(),"hc:",["help","category="])
        except getopt.GetoptError:
            print "Syntax Error"
        for opt, arg in opts:
            if opt in ('-c','--category'):
                category = int(arg)
        s.results=fenopy(' '.join(args),category=category)
        print "Total results: %d"%len(s.results)
    def do_move(s,line):
        """Move torrent id to path.\nExample:\nmove 12 /mnt/storage"""
        (id,location)=line.split(' ',1)
        s.t.move_torrent_data(id,location)
    def do_move_older(s,line):
        """Move downloaded Torrents to dir and remove from list\nExample: move_older /storage/Older 14\ndefault 7 days"""
        l=line.split(' ',1)
        if len(l)==2 and l[1].isdigit():
            days=int(l[1])
        else:
            days=7
        dir=l[0]
        if not dir.startswith('/'):
            return
        print "moving torrent older than %d to %s."%(days,dir)
        for tor in s.t.get_torrents():
            if tor.status == "seeding" and (datetime.datetime.now()-tor.date_done).days>days:
                print (tor.name,(datetime.datetime.now()-tor.date_done).days)
                s.t.move_torrent_data(tor.id,dir)
                s.t.remove_torrent(tor.id)
    def do_remove(s,line):
        """Remove torrent from queue [and delete data].\nExample:\nremove 5\nremove 5 DELETE"""
        id=line.split()
        deletedata = False
        if len(id)==2 and id[1]=='DELETE':
            deletadata= True
        if id[0].isdigit:
            s.t.remove_torrent(id[0],delete_data=deletedata)
    def do_help_long(s,line):
        """Print long helo."""
        print_help()

def print_help():
    print "TransmissionRPC Manual"
    print "**********************\n"
    for ent in sorted(dir(TransmissionCMD)):
        if ent.startswith('do_'):
            print 'Command: '+ent[3:]
            print getattr(TransmissionCMD,ent).__doc__ + '\n'
    print "Search Options:"
    print fenopy.__doc__
if __name__ == '__main__':
    if len(sys.argv)>1:
        if sys.argv[1]=='help_long':
            print_help()
            quit()
        tc=TransmissionCMD()
        tc.onecmd(' '.join(sys.argv[1:]))
        quit()
    try:
        tc=TransmissionCMD()
        tc.cmdloop()
    except KeyboardInterrupt:
        print "\nBYE!"
